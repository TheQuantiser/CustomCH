# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.31)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS CombineHarvester::CombineTools CombineHarvester::ChronoSpectra CombineHarvester::Example1 CombineHarvester::Example2 CombineHarvester::Example3 CombineHarvester::GamGamExample CombineHarvester::ImpactsTable CombineHarvester::LimitCompare CombineHarvester::MSSMExample CombineHarvester::MSSMUpdate CombineHarvester::MSSMYieldTable CombineHarvester::MSSMtauptYieldTable CombineHarvester::NuisanceSummary CombineHarvester::Plot1DScan CombineHarvester::PlotMassScan CombineHarvester::PlotTest CombineHarvester::PostFitPlot2 CombineHarvester::PostFitShapesFromWorkspace CombineHarvester::PrePost CombineHarvester::PrintPulls CombineHarvester::RoundTrip CombineHarvester::SBWeighted CombineHarvester::SMLegacyExample CombineHarvester::SOBPlot CombineHarvester::ShapesFromWorkspace CombineHarvester::YieldTable CombineHarvester::hzz4l CombineHarvester::CombinePdfs CombineHarvester::ContourPlot CombineHarvester::ParametricMSSM CombineHarvester::PlotParametric CombineHarvester::SMLegacyMorphing CombineHarvester::CombineHarvester)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target CombineHarvester::CombineTools
add_library(CombineHarvester::CombineTools SHARED IMPORTED)

set_target_properties(CombineHarvester::CombineTools PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/.conda/envs/inferris/include/libxml2;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/mod;/home/mohammad/mod/HiggsAnalysis/CombinedLimit/."
  INTERFACE_LINK_LIBRARIES "ROOT::RooFitCore;ROOT::RooFit;ROOT::RooStats;Boost::program_options;Boost::filesystem;Boost::system;/home/mohammad/.conda/envs/inferris/lib/libxml2.so;vdt::vdt;HistFactory::HistFactory;HiggsAnalysisCombinedLimit::HiggsAnalysisCombinedLimit"
)

# Create imported target CombineHarvester::ChronoSpectra
add_executable(CombineHarvester::ChronoSpectra IMPORTED)

# Create imported target CombineHarvester::Example1
add_executable(CombineHarvester::Example1 IMPORTED)

# Create imported target CombineHarvester::Example2
add_executable(CombineHarvester::Example2 IMPORTED)

# Create imported target CombineHarvester::Example3
add_executable(CombineHarvester::Example3 IMPORTED)

# Create imported target CombineHarvester::GamGamExample
add_executable(CombineHarvester::GamGamExample IMPORTED)

# Create imported target CombineHarvester::ImpactsTable
add_executable(CombineHarvester::ImpactsTable IMPORTED)

# Create imported target CombineHarvester::LimitCompare
add_executable(CombineHarvester::LimitCompare IMPORTED)

# Create imported target CombineHarvester::MSSMExample
add_executable(CombineHarvester::MSSMExample IMPORTED)

# Create imported target CombineHarvester::MSSMUpdate
add_executable(CombineHarvester::MSSMUpdate IMPORTED)

# Create imported target CombineHarvester::MSSMYieldTable
add_executable(CombineHarvester::MSSMYieldTable IMPORTED)

# Create imported target CombineHarvester::MSSMtauptYieldTable
add_executable(CombineHarvester::MSSMtauptYieldTable IMPORTED)

# Create imported target CombineHarvester::NuisanceSummary
add_executable(CombineHarvester::NuisanceSummary IMPORTED)

# Create imported target CombineHarvester::Plot1DScan
add_executable(CombineHarvester::Plot1DScan IMPORTED)

# Create imported target CombineHarvester::PlotMassScan
add_executable(CombineHarvester::PlotMassScan IMPORTED)

# Create imported target CombineHarvester::PlotTest
add_executable(CombineHarvester::PlotTest IMPORTED)

# Create imported target CombineHarvester::PostFitPlot2
add_executable(CombineHarvester::PostFitPlot2 IMPORTED)

# Create imported target CombineHarvester::PostFitShapesFromWorkspace
add_executable(CombineHarvester::PostFitShapesFromWorkspace IMPORTED)

# Create imported target CombineHarvester::PrePost
add_executable(CombineHarvester::PrePost IMPORTED)

# Create imported target CombineHarvester::PrintPulls
add_executable(CombineHarvester::PrintPulls IMPORTED)

# Create imported target CombineHarvester::RoundTrip
add_executable(CombineHarvester::RoundTrip IMPORTED)

# Create imported target CombineHarvester::SBWeighted
add_executable(CombineHarvester::SBWeighted IMPORTED)

# Create imported target CombineHarvester::SMLegacyExample
add_executable(CombineHarvester::SMLegacyExample IMPORTED)

# Create imported target CombineHarvester::SOBPlot
add_executable(CombineHarvester::SOBPlot IMPORTED)

# Create imported target CombineHarvester::ShapesFromWorkspace
add_executable(CombineHarvester::ShapesFromWorkspace IMPORTED)

# Create imported target CombineHarvester::YieldTable
add_executable(CombineHarvester::YieldTable IMPORTED)

# Create imported target CombineHarvester::hzz4l
add_executable(CombineHarvester::hzz4l IMPORTED)

# Create imported target CombineHarvester::CombinePdfs
add_library(CombineHarvester::CombinePdfs SHARED IMPORTED)

set_target_properties(CombineHarvester::CombinePdfs PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/.conda/envs/inferris/include/libxml2;/home/mohammad/.conda/envs/inferris/include;/home/mohammad/mod;/home/mohammad/mod/HiggsAnalysis/CombinedLimit/."
  INTERFACE_LINK_LIBRARIES "CombineHarvester::CombineTools;ROOT::RooFitCore;ROOT::RooFit;ROOT::RooStats;Boost::program_options;Boost::filesystem;Boost::system;/home/mohammad/.conda/envs/inferris/lib/libxml2.so;vdt::vdt;HistFactory::HistFactory;HiggsAnalysisCombinedLimit::HiggsAnalysisCombinedLimit"
)

# Create imported target CombineHarvester::ContourPlot
add_executable(CombineHarvester::ContourPlot IMPORTED)

# Create imported target CombineHarvester::ParametricMSSM
add_executable(CombineHarvester::ParametricMSSM IMPORTED)

# Create imported target CombineHarvester::PlotParametric
add_executable(CombineHarvester::PlotParametric IMPORTED)

# Create imported target CombineHarvester::SMLegacyMorphing
add_executable(CombineHarvester::SMLegacyMorphing IMPORTED)

# Create imported target CombineHarvester::CombineHarvester
add_library(CombineHarvester::CombineHarvester INTERFACE IMPORTED)

set_target_properties(CombineHarvester::CombineHarvester PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "CombineHarvester::CombineTools;CombineHarvester::CombinePdfs;HiggsAnalysisCombinedLimit::HiggsAnalysisCombinedLimit"
)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/CombineHarvesterTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
